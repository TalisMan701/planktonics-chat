{"version":3,"sources":["store/reducers/auth/types.ts","utils/rules.ts","hooks/useTypedSelector.ts","http/index.ts","store/reducers/chat/types.ts","services/AuthService.ts","store/reducers/auth/action-creators.ts","routers/index.ts","services/ChatService.ts","store/reducers/chat/action-creators.ts","store/reducers/action-creators.ts","hooks/useActions.ts","components/LoginForm.tsx","pages/Login.tsx","pages/Start.tsx","components/Chat/ChatForm.tsx","components/Chat/Chat.tsx","components/Chat/ChatContainer.tsx","components/AppRouter.tsx","components/Logo.tsx","components/Navbar.tsx","components/Sidebar.tsx","App.tsx","store/reducers/auth/index.ts","store/reducers/chat/index.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["AuthActionEnum","rules","message","required","useTypedSelector","useSelector","api","axios","create","withCredentials","baseURL","interceptors","request","use","config","headers","Authorization","localStorage","getItem","response","a","error","originalRequest","status","_isRetry","AuthService","refresh","setItem","data","accessToken","refreshToken","console","log","ChatActionEnum","username","password","post","login","get","AuthActionCreators","setUser","user","type","SET_USER","payload","setIsAuth","isAuth","SET_AUTH","setError","SET_ERROR","setIsLoading","isLoading","SET_IS_LOADING","dispatch","checkAuth","getUserAuthResponse","logout","removeItem","RouteNames","ChatService","chatId","idMessage","newText","text","ChatActionCreators","setId","id","SET_ID","setName","name","SET_NAME","setDescription","description","SET_DESCRIPTION","setMessages","messages","SET_MESSAGES","addMessages","ADD_MESSAGE","setDeleteMessages","DELETE_MESSAGE","setEditMessage","SET_EDIT_MESSAGE","getMessages","getMassage","editMessage","deleteMessage","statusDelete","sendMessage","allActionCreators","useActions","useDispatch","bindActionCreators","LoginForm","state","auth","useState","setUsername","setPassword","onFinish","style","color","Item","label","value","onChange","e","target","htmlType","loading","Login","justify","align","className","Start","ChatForm","chat","setMessage","height","width","marginTop","flexGrow","TextArea","placeholder","autoSize","minRows","maxRows","Chat","props","isEdit","setIsEdit","editedMessage","setEditedMessage","newTextMessage","setNewTextMessage","overflowY","overflowX","padding","length","mode","map","item","index","date","Date","position","userLogin","dot","src","borderRadius","alt","paddingTop","paddingBottom","borderWidth","borderColor","backgroundColor","borderStyle","textAlign","EditOutlined","onClick","top","right","CloseOutlined","marginRight","fontSize","fontWeight","left","bottom","moment","fromNow","title","visible","onOk","onCancel","ChatContainer","useEffect","publicRouters","path","LOGIN","exact","component","privateRouters","WELCOME","CHAT","AppRouter","route","to","Logo","router","useHistory","cursor","push","Navbar","Header","theme","selectable","minWidth","justifyContent","Sidebar","Sider","defaultSelectedKeys","borderRight","App","overflow","Content","initialState","action","filter","rootReducer","combineReducers","reducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2a07a121.chunk.js","sourcesContent":["import {IUser} from \"../../../models/IUser\";\r\n\r\nexport interface AuthState {\r\n    isAuth: boolean;\r\n    user: IUser;\r\n    isLoading: boolean;\r\n    error: string\r\n}\r\n\r\nexport enum AuthActionEnum{\r\n    SET_AUTH = \"SET_AUTH\",\r\n    SET_ERROR = \"SET_ERROR\",\r\n    SET_USER = \"SET_USER\",\r\n    SET_IS_LOADING = \"SET_IS_LOADING\"\r\n}\r\n\r\nexport interface SetAuthAction{\r\n    type: AuthActionEnum.SET_AUTH;\r\n    payload: boolean;\r\n}\r\n\r\nexport interface SetErrorAction{\r\n    type: AuthActionEnum.SET_ERROR;\r\n    payload: string;\r\n}\r\n\r\nexport interface SetUserAction{\r\n    type: AuthActionEnum.SET_USER;\r\n    payload: IUser;\r\n}\r\n\r\nexport interface SetIsLoadingAction{\r\n    type: AuthActionEnum.SET_IS_LOADING;\r\n    payload: boolean;\r\n}\r\n\r\nexport type AuthAction =\r\n    SetAuthAction | SetErrorAction | SetUserAction | SetIsLoadingAction\r\n","\r\n\r\nexport const rules = {\r\n    required: (message: string) => ({\r\n        required: true,\r\n        message\r\n    })\r\n}\r\n","import {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../store\";\r\n\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector\r\n","import axios from 'axios'\r\nimport AuthService from \"../services/AuthService\";\r\n\r\nexport const API_URL = `https://planktoniks.herokuapp.com/api/v1`\r\n\r\nconst api = axios.create({\r\n    withCredentials: true,\r\n    baseURL: API_URL\r\n})\r\n\r\napi.interceptors.request.use(config => {\r\n    config.headers.Authorization = `Authorization ${localStorage.getItem('token')}`\r\n    return config\r\n})\r\n\r\napi.interceptors.response.use((config) => {\r\n    return config\r\n}, async (error) => {\r\n    const originalRequest = error.config\r\n    if(error.response.status === 401 && error.config && !error._isRetry){\r\n        originalRequest._isRetry = true\r\n        try {\r\n            const response = await AuthService.refresh()\r\n            localStorage.setItem('token', response.data.accessToken)\r\n            localStorage.setItem('tokenRefresh', response.data.refreshToken)\r\n            return api.request(originalRequest)\r\n        }\r\n        catch (e){\r\n            console.log(\"Не авторизован\")\r\n        }\r\n    }\r\n    throw error\r\n})\r\n\r\nexport default api\r\n","import {IMessage} from \"../../../models/IMessage\";\r\n\r\nexport interface ChatState {\r\n    id: string;\r\n    name: string;\r\n    description: string;\r\n    error: string;\r\n    messages: IMessage[];\r\n    isLoading: boolean\r\n}\r\n\r\nexport enum ChatActionEnum{\r\n    SET_ID = \"SET_ID\",\r\n    SET_NAME = \"SET_NAME\",\r\n    ADD_MESSAGE = \"ADD_MESSAGE\",\r\n    DELETE_MESSAGE = \"DELETE_MESSAGE\",\r\n    SET_EDIT_MESSAGE = \"SET_EDIT_MESSAGE\",\r\n    SET_DESCRIPTION = \"SET_DESCRIPTION\",\r\n    SET_ERROR = \"SET_ERROR\",\r\n    SET_IS_LOADING = \"SET_IS_LOADING\",\r\n    SET_MESSAGES = \"SET_MESSAGES\"\r\n}\r\n\r\nexport interface SetIdAction{\r\n    type: ChatActionEnum.SET_ID;\r\n    payload: string\r\n}\r\n\r\nexport interface SetNameAction{\r\n    type: ChatActionEnum.SET_NAME;\r\n    payload: string\r\n}\r\n\r\nexport interface SetDescriptionAction{\r\n    type: ChatActionEnum.SET_DESCRIPTION;\r\n    payload: string\r\n}\r\n\r\nexport interface SetErrorAction{\r\n    type: ChatActionEnum.SET_ERROR;\r\n    payload: string\r\n}\r\n\r\nexport interface SetIsLoadingAction{\r\n    type: ChatActionEnum.SET_IS_LOADING;\r\n    payload: boolean\r\n}\r\n\r\nexport interface SetMessagesAction{\r\n    type: ChatActionEnum.SET_MESSAGES;\r\n    payload: IMessage[]\r\n}\r\n\r\nexport interface AddMessageAction{\r\n    type: ChatActionEnum.ADD_MESSAGE;\r\n    payload: IMessage\r\n}\r\n\r\nexport interface SetEditMessageAction{\r\n    type: ChatActionEnum.SET_EDIT_MESSAGE;\r\n    payload: IMessage\r\n}\r\n\r\nexport interface DeleteMessageAction{\r\n    type: ChatActionEnum.DELETE_MESSAGE;\r\n    payload: string\r\n}\r\n\r\nexport type ChatAction =\r\n    SetIdAction | SetNameAction | SetDescriptionAction | SetErrorAction | SetIsLoadingAction | SetMessagesAction | AddMessageAction | SetEditMessageAction | DeleteMessageAction\r\n","import api from \"../http\";\r\nimport {AxiosResponse} from 'axios'\r\nimport {AuthResponse} from \"../models/response/AuthResponse\";\r\nexport default class AuthService {\r\n    static async login(username: string, password: string): Promise<AxiosResponse<AuthResponse>> {\r\n        return api.post<AuthResponse>('/oauth/tokens', {login: username, password})\r\n    }\r\n    static async checkAuth(): Promise<AxiosResponse<AuthResponse>> {\r\n        return api.get<AuthResponse>('/users/sync')\r\n    }\r\n    static async logout(): Promise<void> {\r\n        return api.get('/users/logout')\r\n    }\r\n    static async refresh(): Promise<AxiosResponse<AuthResponse>>{\r\n        return api.post<AuthResponse>('/oauth/refresh', {refreshToken: localStorage.getItem(\"tokenRefresh\") || ''})\r\n    }\r\n}\r\n","import {AuthActionEnum, SetAuthAction, SetErrorAction, SetIsLoadingAction, SetUserAction} from \"./types\";\r\nimport {IUser} from \"../../../models/IUser\";\r\nimport {AppDispatch} from \"../../index\";\r\nimport AuthService from \"../../../services/AuthService\";\r\n\r\nexport const AuthActionCreators = {\r\n    setUser: (user: IUser): SetUserAction => ({type: AuthActionEnum.SET_USER, payload: user}),\r\n    setIsAuth: (isAuth: boolean): SetAuthAction => ({type: AuthActionEnum.SET_AUTH, payload: isAuth}),\r\n    setError: (error: string): SetErrorAction => ({type: AuthActionEnum.SET_ERROR, payload: error}),\r\n    setIsLoading: (isLoading: boolean): SetIsLoadingAction => ({type: AuthActionEnum.SET_IS_LOADING, payload: isLoading}),\r\n    login: (username: string, password: string) => async (dispatch: AppDispatch) => {\r\n        try {\r\n            dispatch(AuthActionCreators.setIsLoading(true))\r\n            const response = await AuthService.login(username, password);\r\n            localStorage.setItem('token', response.data.accessToken)\r\n            localStorage.setItem('tokenRefresh', response.data.refreshToken)\r\n            dispatch(AuthActionCreators.setIsAuth(true))\r\n            dispatch(AuthActionCreators.setUser(response.data.user))\r\n            dispatch(AuthActionCreators.setIsLoading(false))\r\n        }\r\n        catch (e){\r\n            dispatch(AuthActionCreators.setError(\"Произошла ошибка при логине\"))\r\n        }\r\n    },\r\n    checkAuth: () => async (dispatch: AppDispatch) => {\r\n        try {\r\n            dispatch(AuthActionCreators.setIsLoading(true))\r\n            const getUserAuthResponse = await AuthService.checkAuth()\r\n            dispatch(AuthActionCreators.setIsAuth(true))\r\n            dispatch(AuthActionCreators.setUser(getUserAuthResponse.data.user))\r\n            dispatch(AuthActionCreators.setIsLoading(false))\r\n        }\r\n        catch (e){\r\n            dispatch(AuthActionCreators.setError(\"Произошла ошибка при получении данных\"))\r\n        }\r\n    },\r\n    logout: () => async (dispatch: AppDispatch) => {\r\n        try {\r\n            await AuthService.logout()\r\n            localStorage.removeItem('token')\r\n            localStorage.removeItem('tokenRefresh')\r\n            dispatch(AuthActionCreators.setIsAuth(false))\r\n            dispatch(AuthActionCreators.setUser({} as IUser))\r\n        }\r\n        catch (e){\r\n            dispatch(AuthActionCreators.setError(\"Произошла ошибка при выходе\"))\r\n        }\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport Login from \"../pages/Login\";\r\nimport Start from \"../pages/Start\";\r\nimport ChatContainer from \"../components/Chat/ChatContainer\";\r\n\r\nexport interface IRoute{\r\n    path: string;\r\n    component: React.ComponentType;\r\n    exact?: boolean;\r\n}\r\n\r\nexport enum RouteNames {\r\n    LOGIN = '/login',\r\n    CHAT = '/chat',\r\n    WELCOME = '/'\r\n}\r\n\r\nexport const publicRouters: IRoute[] = [\r\n    {path: RouteNames.LOGIN, exact: true, component: Login}\r\n]\r\n\r\nexport const privateRouters: IRoute[] = [\r\n    {path: RouteNames.WELCOME, exact: true, component: Start},\r\n    {path: RouteNames.CHAT, exact: true, component: ChatContainer}\r\n]\r\n","import {AxiosResponse} from \"axios\";\r\nimport api from \"../http\";\r\nimport {IMessage} from \"../models/IMessage\";\r\nimport {ChatResponse} from \"../models/response/ChatResponse\";\r\n\r\nexport default class ChatService {\r\n    static async getMassage(chatId: string): Promise<AxiosResponse<IMessage[]>> {\r\n        return api.get<IMessage[]>(`/users/getAllMessageByIdChat/${chatId}`)\r\n    }\r\n    static async editMessage(idMessage: string, newText: string): Promise<AxiosResponse<IMessage>> {\r\n        return api.post<IMessage>(`/users/editMessageByIdMessage/${idMessage}`, {text: newText})\r\n    }\r\n    static async deleteMessage(idMessage: string): Promise<AxiosResponse<ChatResponse>> {\r\n        return api.get<ChatResponse>(`/users/deleteMessageById/${idMessage}`)\r\n    }\r\n    static async sendMessage(chatId: string, text: string): Promise<AxiosResponse<IMessage>> {\r\n        return api.post<IMessage>(`/users/sendMessageByIdChat`, {chatId, text})\r\n    }\r\n}\r\n","import {\r\n    AddMessageAction,\r\n    ChatActionEnum, DeleteMessageAction,\r\n    SetDescriptionAction, SetEditMessageAction,\r\n    SetErrorAction,\r\n    SetIdAction,\r\n    SetIsLoadingAction, SetMessagesAction,\r\n    SetNameAction\r\n} from \"./types\";\r\nimport {AppDispatch} from \"../../index\";\r\nimport ChatService from \"../../../services/ChatService\";\r\nimport {IMessage} from \"../../../models/IMessage\";\r\n\r\n\r\nexport const ChatActionCreators = {\r\n    setId: (id: string): SetIdAction => ({type: ChatActionEnum.SET_ID, payload: id}),\r\n    setName: (name: string): SetNameAction => ({type: ChatActionEnum.SET_NAME, payload: name}),\r\n    setDescription: (description: string): SetDescriptionAction => ({type: ChatActionEnum.SET_DESCRIPTION, payload: description}),\r\n    setError: (error: string): SetErrorAction => ({type: ChatActionEnum.SET_ERROR, payload: error}),\r\n    setIsLoading: (isLoading: boolean): SetIsLoadingAction => ({type: ChatActionEnum.SET_IS_LOADING, payload: isLoading}),\r\n    setMessages: (messages: IMessage[]): SetMessagesAction => ({type: ChatActionEnum.SET_MESSAGES, payload: messages}),\r\n    addMessages: (message: IMessage): AddMessageAction => ({type: ChatActionEnum.ADD_MESSAGE, payload: message}),\r\n    setDeleteMessages: (idMessage: string): DeleteMessageAction => ({type: ChatActionEnum.DELETE_MESSAGE, payload: idMessage}),\r\n    setEditMessage: (message: IMessage): SetEditMessageAction => ({type: ChatActionEnum.SET_EDIT_MESSAGE, payload: message}),\r\n\r\n    getMessages: (id: string) => async (dispatch: AppDispatch) => {\r\n        try {\r\n            dispatch(ChatActionCreators.setIsLoading(true))\r\n            const response = await ChatService.getMassage(id)\r\n            dispatch(ChatActionCreators.setMessages(response.data))\r\n            dispatch(ChatActionCreators.setIsLoading(false))\r\n        }\r\n        catch (e) {\r\n            dispatch(ChatActionCreators.setError(\"Произошла ошибка при получении сообщений!\"))\r\n        }\r\n    },\r\n    editMessage: (idMessage: string, newText: string) => async (dispatch: AppDispatch) => {\r\n        try {\r\n            const response = await ChatService.editMessage(idMessage, newText)\r\n            dispatch(ChatActionCreators.setEditMessage(response.data))\r\n        }\r\n        catch (e){\r\n            dispatch(ChatActionCreators.setError(\"Произошла ошибка при изменении сообщения!\"))\r\n        }\r\n    },\r\n    deleteMessage: (idMessage: string) => async (dispatch: AppDispatch) => {\r\n        try {\r\n            const response = await ChatService.deleteMessage(idMessage)\r\n            if(response.data.statusDelete){\r\n                dispatch(ChatActionCreators.setDeleteMessages(idMessage))\r\n            }\r\n        }\r\n        catch (e){\r\n            dispatch(ChatActionCreators.setError(\"Произошла ошибка при удалении сообщения!\"))\r\n        }\r\n    },\r\n    sendMessage: (chatId: string, text: string) => async (dispatch: AppDispatch) => {\r\n        try {\r\n            const response = await ChatService.sendMessage(chatId, text)\r\n            dispatch(ChatActionCreators.addMessages(response.data))\r\n        }\r\n        catch (e){\r\n            dispatch(ChatActionCreators.setError(\"Произошла ошибка при отправке сообщения\"))\r\n        }\r\n    }\r\n}\r\n","import {AuthActionCreators} from \"./auth/action-creators\";\r\nimport {ChatActionCreators} from \"./chat/action-creators\";\r\n\r\n\r\nexport const allActionCreators = {\r\n    ...AuthActionCreators,\r\n    ...ChatActionCreators\r\n}\r\n","import {useDispatch} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {allActionCreators} from \"../store/reducers/action-creators\";\r\n\r\n\r\nexport const useActions = () => {\r\n    const dispatch = useDispatch()\r\n    return bindActionCreators(allActionCreators, dispatch)\r\n}\r\n","import React, {FC, useState} from 'react';\r\nimport {Button, Form, Input} from \"antd\";\r\nimport { rules } from '../utils/rules';\r\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\r\nimport {useActions} from \"../hooks/useActions\";\r\n\r\nconst LoginForm: FC = () => {\r\n    const {error, isLoading} = useTypedSelector(state => state.auth)\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const {login} = useActions()\r\n\r\n    const submit = () => {\r\n        login(username, password)\r\n    }\r\n\r\n    return (\r\n        <Form\r\n            onFinish={submit}\r\n        >\r\n            {error && <div style={{color: \"red\"}}>\r\n                {error}\r\n            </div>}\r\n            <Form.Item\r\n                label=\"Имя пользователя\"\r\n                name=\"username\"\r\n                rules={[rules.required('Пожалуйста введите имя пользователя!')]}\r\n            >\r\n                <Input\r\n                    value={username}\r\n                    onChange={(e)=>setUsername(e.target.value)}\r\n                />\r\n            </Form.Item>\r\n            <Form.Item\r\n                label=\"Пароль\"\r\n                name=\"password\"\r\n                rules={[rules.required('Пожалуйста введите пароль!')]}\r\n            >\r\n                <Input\r\n                    value={password}\r\n                    type={\"password\"}\r\n                    onChange={(e)=>setPassword(e.target.value)}\r\n                />\r\n            </Form.Item>\r\n            <Form.Item>\r\n                <Button type=\"primary\" htmlType=\"submit\" loading={isLoading}>\r\n                    Войти\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React, {FC} from 'react';\r\nimport {Card, Layout, Row} from \"antd\";\r\nimport LoginForm from \"../components/LoginForm\";\r\n\r\nconst Login:FC = () => {\r\n    return (\r\n        <Layout>\r\n            <Row justify={\"center\"} align={\"middle\"} className={\"h100\"}>\r\n                <Card>\r\n                    <LoginForm/>\r\n                </Card>\r\n            </Row>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import React, {FC} from 'react';\r\nimport {Layout, Row} from \"antd\";\r\n\r\nconst Start: FC = () => {\r\n    return (\r\n        <Layout>\r\n            <Row justify={\"center\"} align={\"middle\"} className={\"h100\"}>\r\n                Welcome to chat service your company!\r\n            </Row>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default Start;\r\n","import React, {FC, useState} from 'react';\r\nimport {Button, Form, Input, Row} from \"antd\";\r\nimport {rules} from \"../../utils/rules\";\r\nimport {useTypedSelector} from \"../../hooks/useTypedSelector\";\r\nimport {useActions} from \"../../hooks/useActions\";\r\n\r\nconst ChatForm: FC = () => {\r\n    const {error, id} = useTypedSelector(state => state.chat)\r\n    const [message, setMessage] = useState('')\r\n    const {sendMessage} = useActions()\r\n\r\n    const submit = () => {\r\n        sendMessage(id, message)\r\n    }\r\n    return (\r\n        <div style={{height: \"10%\", width: \"100%\", marginTop: 12}}>\r\n            <Form\r\n                onFinish={submit}\r\n            >\r\n                <Row>\r\n                    <Form.Item\r\n                        style={{flexGrow: 1}}\r\n                        name=\"messageText\"\r\n                        rules={[rules.required('Нельзя отправлять пустое сообщение!')]}\r\n                    >\r\n                        <Input.TextArea\r\n                            value={message}\r\n                            onChange={(e)=>setMessage(e.target.value)}\r\n                            placeholder=\"Введите сообщение...\"\r\n                            autoSize={{ minRows: 1, maxRows: 2}}\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button style={{height: \"100%\"}} type=\"primary\" htmlType=\"submit\" loading={false}>\r\n                            Отправить\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Row>\r\n                {error && <div style={{color: \"red\"}}>\r\n                    {error}\r\n\t\t\t\t</div>}\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatForm;\r\n","import React, {FC, useState} from 'react';\r\nimport {Card, Input, Modal, Timeline} from \"antd\";\r\nimport {IMessage} from \"../../models/IMessage\";\r\nimport ChatForm from \"./ChatForm\";\r\nimport {useTypedSelector} from \"../../hooks/useTypedSelector\";\r\nimport {CloseOutlined, EditOutlined} from \"@ant-design/icons\"\r\nimport moment from \"moment\";\r\nimport {useActions} from \"../../hooks/useActions\";\r\n\r\ninterface ChatProps{\r\n    messages: IMessage[];\r\n    isLoading: boolean\r\n}\r\n\r\nconst Chat: FC<ChatProps> = (props) => {\r\n    const {user} = useTypedSelector(state => state.auth)\r\n    const [isEdit, setIsEdit] = useState(false)\r\n    const [editedMessage, setEditedMessage] = useState({} as IMessage)\r\n    const [newTextMessage, setNewTextMessage] = useState('')\r\n    const {deleteMessage, editMessage} = useActions()\r\n\r\n    const handleOk = () => {\r\n\r\n        setIsEdit(false)\r\n        editMessage(editedMessage.id, newTextMessage)\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setIsEdit(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Card style={{overflowY: \"scroll\", overflowX: \"hidden\", padding: 16, height: \"70%\", width: \"100%\"}}>\r\n                {props.messages.length !== 0\r\n                    ?\r\n                        <Timeline mode=\"alternate\">\r\n                        {props.messages.map((item, index) => {\r\n                            let date = new Date(item.date)\r\n                            return(\r\n                                <Timeline.Item\r\n                                    key={`mes${index}`}\r\n                                    position={item.userLogin === user.login ? \"left\" : \"right\"}\r\n                                    dot={<img src=\"https://fiverr-res.cloudinary.com/images/t_main1,q_auto,f_auto,q_auto,f_auto/gigs/21760012/original/d4c0c142f91f012c9a8a9c9aeef3bac28036f15b/create-your-cartoon-style-flat-avatar-or-icon.jpg\" style={{width: 32, height: 32, borderRadius: \"50%\"}} alt=\"\"/>}\r\n                                >\r\n                                    <div className={\"contentMessage\"} style={{position: \"relative\", paddingTop: 8, paddingBottom: 8}}>\r\n                                        <div style={{padding: 12, borderWidth: 1, borderColor: \"#1890ff\", backgroundColor: \"#edf9ff\", borderStyle: \"solid\", borderRadius: 5}}>\r\n                                            <p style={{width: \"100%\", textAlign: \"start\"}}>{item.text}</p>\r\n                                        </div>\r\n                                        {item.userLogin === user.login &&\r\n                                            <>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<EditOutlined\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={()=> {\r\n                                                        setIsEdit(true)\r\n                                                        setEditedMessage(item)\r\n                                                        setNewTextMessage(item.text)\r\n                                                    }}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={\"iconChat--hover\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{position: \"absolute\", top: 14, right: 28}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<CloseOutlined\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={()=>{deleteMessage(item.id)}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={\"iconChat--hover\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{position: \"absolute\", top: 14, right: 8}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n                                            </>\r\n                                        }\r\n                                        <span style={{marginRight: 4, fontSize: 12, color: \"#444\", fontWeight: \"bold\", position: \"absolute\", left: 8, top: -10}}>{item.userLogin}</span>\r\n                                        <span style={{fontSize: 10, position: \"absolute\", right: 8, bottom: -8}}>{moment(date).fromNow()}</span>\r\n                                    </div>\r\n                                </Timeline.Item>\r\n                            )\r\n                        })}\r\n                    </Timeline>\r\n                    :\r\n                        <div>\r\n                            <p>Нет сообщений. Будь первым :)</p>\r\n                        </div>\r\n                }\r\n\r\n            </Card>\r\n            <ChatForm/>\r\n            <Modal title=\"Редактирование сообщения\" visible={isEdit} onOk={handleOk} onCancel={handleCancel}>\r\n                <p>Давайте поменяем Ваше сообщение</p>\r\n                <Input value={newTextMessage} onChange={(e)=>setNewTextMessage(e.target.value)}/>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n","import React, {FC, useEffect} from 'react';\r\nimport {Layout, Row} from \"antd\";\r\nimport Chat from \"./Chat\";\r\nimport {useTypedSelector} from \"../../hooks/useTypedSelector\";\r\nimport {useActions} from \"../../hooks/useActions\";\r\n\r\n\r\nconst ChatContainer: FC = () => {\r\n    const {id, name, description, isLoading, messages} = useTypedSelector(state => state.chat)\r\n    const {getMessages} = useActions()\r\n    useEffect(()=>{\r\n        getMessages(id)\r\n    },[id])\r\n    if(isLoading){\r\n        return(\r\n            <Layout>\r\n                <Row className={\"h100\"} justify={\"center\"}>\r\n                    Loading...\r\n                </Row>\r\n            </Layout>\r\n        )\r\n    }\r\n    return (\r\n        <Layout className={\"h100\"}>\r\n            <Row style={{height: \"100%\", padding: 16}}>\r\n                <div style={{height: \"20%\"}}>\r\n                    <h2 style={{width: \"100%\"}}>{name}</h2>\r\n                    <p style={{width: \"100%\"}}>{description}</p>\r\n                </div>\r\n\r\n                <Chat\r\n                    messages={messages}\r\n                    isLoading={isLoading}\r\n                />\r\n            </Row>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default ChatContainer;\r\n","import React, {FC} from 'react';\r\nimport {Switch, Route, Redirect} from \"react-router-dom\";\r\nimport {privateRouters, publicRouters, RouteNames} from \"../routers\";\r\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\r\n\r\n\r\nconst AppRouter: FC = () => {\r\n    const {isAuth} = useTypedSelector(state => state.auth)\r\n    return (\r\n        isAuth\r\n            ?\r\n            <Switch>\r\n                {privateRouters.map(route =>\r\n                    <Route\r\n                        path={route.path}\r\n                        exact={route.exact}\r\n                        component={route.component}\r\n                        key={route.path}\r\n                    />\r\n                )}\r\n                <Redirect to={RouteNames.WELCOME}/>\r\n            </Switch>\r\n            :\r\n            <Switch>\r\n                {publicRouters.map(route =>\r\n                    <Route\r\n                        path={route.path}\r\n                        exact={route.exact}\r\n                        component={route.component}\r\n                        key={route.path}\r\n                    />\r\n                )}\r\n                <Redirect to={RouteNames.LOGIN}/>\r\n            </Switch>\r\n    );\r\n};\r\n\r\nexport default AppRouter;\r\n","import React, {FC} from 'react';\r\nimport {RouteNames} from \"../routers\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nconst Logo: FC = () => {\r\n    const router = useHistory()\r\n    return (\r\n        <div\r\n            style={{fontSize: 24, color: \"#fff\", cursor: \"pointer\"}}\r\n            onClick={()=>router.push(RouteNames.WELCOME)}\r\n        >\r\n            Planktoniks\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Logo;\r\n","import React, {FC} from 'react';\r\nimport {Layout,Menu, Row} from \"antd\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport { RouteNames } from '../routers';\r\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\r\nimport {useActions} from \"../hooks/useActions\";\r\nimport Logo from \"./Logo\";\r\n\r\nconst Navbar: FC = () => {\r\n    const router = useHistory()\r\n    const {isAuth, user} = useTypedSelector(state => state.auth)\r\n    const {logout} = useActions()\r\n    return (\r\n        <Layout.Header>\r\n            <Row justify={\"space-between\"}>\r\n                <Logo/>\r\n                {isAuth\r\n                    ?\r\n                    <Row>\r\n                        <div style={{color: \"white\", marginRight: 8}}>{user.username}</div>\r\n                        <Menu theme=\"dark\" mode=\"horizontal\" selectable={false}>\r\n\r\n                            <Menu.Item\r\n                                key=\"1\"\r\n                                onClick={logout}\r\n                            >\r\n                                Выйти\r\n                            </Menu.Item>\r\n                        </Menu>\r\n                    </Row>\r\n                    :\r\n                    <Menu style={{minWidth: '200px', justifyContent: \"flex-end\"}} theme=\"dark\" mode=\"horizontal\" selectable={false}>\r\n                        <Menu.Item\r\n                            key=\"1\"\r\n                            onClick={()=>router.push(RouteNames.LOGIN)}\r\n                        >\r\n                            Логин\r\n                        </Menu.Item>\r\n                    </Menu>\r\n                }\r\n            </Row>\r\n        </Layout.Header>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","import { Menu, Layout } from 'antd';\r\nimport React, {FC} from 'react';\r\nimport {RouteNames} from \"../routers\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {useActions} from \"../hooks/useActions\";\r\n\r\nconst Sidebar: FC = () => {\r\n    const router = useHistory()\r\n    const {setId, setName, setDescription, setError} = useActions()\r\n    return (\r\n        <Layout.Sider width={200} className=\"site-layout-background\">\r\n            <Menu\r\n                mode=\"inline\"\r\n                defaultSelectedKeys={['1']}\r\n                style={{ height: '100%', borderRight: 0 }}\r\n            >\r\n                <Menu.Item\r\n                    key=\"1\"\r\n                    onClick={()=>{\r\n                        setId(\"61420e2c341aae384410455a\")\r\n                        setName(\"Чат для обсуждения рабочих вопросов\")\r\n                        setDescription(\"В данном чате пишем исключительно по рабочим вопросам, чтобы избежать потери важной информации. Для общения есть флудилка :)\")\r\n                        setError(\"\")\r\n                        router.push(RouteNames.CHAT)\r\n                    }}\r\n                >\r\n                    Работа\r\n                </Menu.Item>\r\n                <Menu.Item\r\n                    key=\"2\"\r\n                    onClick={()=>{\r\n                        setId(\"61420e35341aae384410455c\")\r\n                        setName(\"Чат для общения и сплочения\")\r\n                        setDescription(\"Если вам скучно, пишите, не стесняйтесь!\")\r\n                        setError(\"\")\r\n                        router.push(RouteNames.CHAT)\r\n                    }}\r\n                >\r\n                    Флудилка\r\n                </Menu.Item>\r\n            </Menu>\r\n        </Layout.Sider>\r\n    );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React, {FC, useEffect} from 'react';\nimport AppRouter from \"./components/AppRouter\";\nimport Navbar from \"./components/Navbar\";\nimport {Layout} from \"antd\";\nimport './App.css'\nimport {useActions} from \"./hooks/useActions\";\nimport Sidebar from \"./components/Sidebar\";\nimport {useTypedSelector} from \"./hooks/useTypedSelector\";\n\nconst App:FC = () => {\n    const {isAuth} = useTypedSelector(state => state.auth)\n    const {checkAuth} = useActions()\n    useEffect(()=>{\n        checkAuth()\n    },[])\n  return (\n    <Layout style={{overflow: \"hidden\"}}>\n        <Navbar/>\n        <Layout>\n            {isAuth &&\n\t\t\t    <Sidebar/>\n            }\n            <Layout.Content>\n                <AppRouter/>\n            </Layout.Content>\n        </Layout>\n    </Layout>\n  );\n}\n\nexport default App;\n","import {AuthAction, AuthActionEnum, AuthState} from \"./types\";\r\nimport {IUser} from \"../../../models/IUser\";\r\n\r\nconst initialState: AuthState = {\r\n    isAuth: false,\r\n    error: '',\r\n    isLoading: false,\r\n    user: {} as IUser\r\n}\r\nexport default  function authReducer(state = initialState, action: AuthAction): AuthState {\r\n    switch (action.type){\r\n        case AuthActionEnum.SET_AUTH:\r\n            return {...state, isAuth: action.payload, isLoading: false}\r\n        case AuthActionEnum.SET_USER:\r\n            return {...state, user: action.payload}\r\n        case AuthActionEnum.SET_IS_LOADING:\r\n            return {...state, isLoading: action.payload}\r\n        case AuthActionEnum.SET_ERROR:\r\n            return {...state, error: action.payload, isLoading: false}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {IMessage} from \"../../../models/IMessage\";\r\nimport {ChatAction, ChatActionEnum, ChatState} from \"./types\";\r\nconst initialState = {\r\n    id: '',\r\n    name: '',\r\n    description: '',\r\n    error: '',\r\n    messages: [] as IMessage[],\r\n    isLoading: false\r\n}\r\n\r\nexport default function chatReducer(state = initialState, action: ChatAction): ChatState{\r\n    switch (action.type){\r\n        case ChatActionEnum.SET_ID:\r\n            return {...state, id: action.payload}\r\n        case ChatActionEnum.SET_NAME:\r\n            return {...state, name: action.payload}\r\n        case ChatActionEnum.SET_DESCRIPTION:\r\n            return {...state, description: action.payload}\r\n        case ChatActionEnum.SET_ERROR:\r\n            return {...state, error: action.payload, isLoading: false}\r\n        case ChatActionEnum.SET_IS_LOADING:\r\n            return {...state, isLoading: action.payload}\r\n        case ChatActionEnum.SET_MESSAGES:\r\n            return {...state, messages: action.payload, isLoading: false}\r\n        case ChatActionEnum.ADD_MESSAGE:{\r\n            return {...state, messages: [...state.messages, action.payload]}\r\n        }\r\n        case ChatActionEnum.SET_EDIT_MESSAGE:{\r\n            return {...state, messages: state.messages.map(message => message.id === action.payload.id ? action.payload : message)}\r\n        }\r\n        case ChatActionEnum.DELETE_MESSAGE:{\r\n            return {...state, messages: state.messages.filter(message => message.id !== action.payload)}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import auth from './auth'\r\nimport chat from './chat'\r\n\r\nexport default {\r\n    auth,\r\n    chat\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from 'redux-thunk'\r\nimport reducers from \"./reducers\"\r\n\r\nconst rootReducer = combineReducers(reducers)\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport {store} from \"./store\";\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}