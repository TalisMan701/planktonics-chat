{"version":3,"sources":["store/reducers/auth/types.ts","utils/rules.ts","hooks/useTypedSelector.ts","store/reducers/auth/index.ts","store/reducers/chat/types.ts","store/reducers/chat/index.ts","store/reducers/index.ts","store/index.ts","http/index.ts","routers/index.ts","services/AuthService.ts","store/reducers/auth/action-creators.ts","services/ChatService.ts","store/reducers/chat/action-creators.ts","store/reducers/action-creators.ts","hooks/useActions.ts","components/LoginForm.tsx","pages/Login.tsx","pages/Start.tsx","components/Chat/ChatForm.tsx","components/Chat/Chat.tsx","components/Chat/ChatContainer.tsx","components/AppRouter.tsx","components/Logo.tsx","components/Navbar.tsx","components/Sidebar.tsx","App.tsx","index.tsx"],"names":["AuthActionEnum","rules","message","required","useTypedSelector","useSelector","initialState","isAuth","error","isLoading","user","ChatActionEnum","id","name","description","messages","auth","state","action","type","SET_AUTH","payload","SET_USER","SET_IS_LOADING","SET_ERROR","chat","SET_ID","SET_NAME","SET_DESCRIPTION","SET_MESSAGES","ADD_MESSAGE","SET_EDIT_MESSAGE","map","DELETE_MESSAGE","filter","rootReducer","combineReducers","reducers","store","createStore","applyMiddleware","thunk","api","axios","create","withCredentials","baseURL","interceptors","request","use","config","headers","Authorization","localStorage","getItem","response","a","originalRequest","status","_isRetry","AuthService","refresh","setItem","data","accessToken","refreshToken","removeItem","dispatch","AuthActionCreators","setIsAuth","setUser","RouteNames","username","password","post","login","get","setError","setIsLoading","checkAuth","getUserAuthResponse","logout","ChatService","chatId","idMessage","newText","text","ChatActionCreators","setId","setName","setDescription","setMessages","addMessages","setDeleteMessages","setEditMessage","getMessages","getMassage","editMessage","deleteMessage","statusDelete","sendMessage","allActionCreators","useActions","useDispatch","bindActionCreators","LoginForm","useState","setUsername","setPassword","onFinish","style","color","Item","label","value","onChange","e","target","htmlType","loading","Login","justify","align","className","Start","ChatForm","setMessage","submit","height","width","marginTop","flexGrow","TextArea","onKeyPress","key","placeholder","autoSize","minRows","maxRows","Chat","props","isEdit","setIsEdit","editedMessage","setEditedMessage","newTextMessage","setNewTextMessage","overflowY","overflowX","padding","length","mode","item","index","date","Date","position","userLogin","dot","src","borderRadius","alt","paddingTop","paddingBottom","borderWidth","borderColor","backgroundColor","borderStyle","textAlign","EditOutlined","onClick","top","right","CloseOutlined","marginRight","fontSize","fontWeight","left","bottom","moment","fromNow","title","visible","onOk","onCancel","ChatContainer","useEffect","publicRouters","path","LOGIN","exact","component","privateRouters","WELCOME","CHAT","AppRouter","route","to","Logo","router","useHistory","cursor","push","Navbar","Header","theme","selectable","minWidth","justifyContent","Sidebar","Sider","defaultSelectedKeys","borderRight","App","overflow","Content","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.61db0714.chunk.js","sourcesContent":["import {IUser} from \"../../../models/IUser\";\r\n\r\nexport interface AuthState {\r\n    isAuth: boolean;\r\n    user: IUser;\r\n    isLoading: boolean;\r\n    error: string\r\n}\r\n\r\nexport enum AuthActionEnum{\r\n    SET_AUTH = \"SET_AUTH\",\r\n    SET_ERROR = \"SET_ERROR\",\r\n    SET_USER = \"SET_USER\",\r\n    SET_IS_LOADING = \"SET_IS_LOADING\"\r\n}\r\n\r\nexport interface SetAuthAction{\r\n    type: AuthActionEnum.SET_AUTH;\r\n    payload: boolean;\r\n}\r\n\r\nexport interface SetErrorAction{\r\n    type: AuthActionEnum.SET_ERROR;\r\n    payload: string;\r\n}\r\n\r\nexport interface SetUserAction{\r\n    type: AuthActionEnum.SET_USER;\r\n    payload: IUser;\r\n}\r\n\r\nexport interface SetIsLoadingAction{\r\n    type: AuthActionEnum.SET_IS_LOADING;\r\n    payload: boolean;\r\n}\r\n\r\nexport type AuthAction =\r\n    SetAuthAction | SetErrorAction | SetUserAction | SetIsLoadingAction\r\n","\r\n\r\nexport const rules = {\r\n    required: (message: string) => ({\r\n        required: true,\r\n        message\r\n    })\r\n}\r\n","import {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../store\";\r\n\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector\r\n","import {AuthAction, AuthActionEnum, AuthState} from \"./types\";\r\nimport {IUser} from \"../../../models/IUser\";\r\n\r\nconst initialState: AuthState = {\r\n    isAuth: false,\r\n    error: '',\r\n    isLoading: false,\r\n    user: {} as IUser\r\n}\r\nexport default  function authReducer(state = initialState, action: AuthAction): AuthState {\r\n    switch (action.type){\r\n        case AuthActionEnum.SET_AUTH:\r\n            return {...state, isAuth: action.payload, isLoading: false}\r\n        case AuthActionEnum.SET_USER:\r\n            return {...state, user: action.payload}\r\n        case AuthActionEnum.SET_IS_LOADING:\r\n            return {...state, isLoading: action.payload}\r\n        case AuthActionEnum.SET_ERROR:\r\n            return {...state, error: action.payload, isLoading: false}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {IMessage} from \"../../../models/IMessage\";\r\n\r\nexport interface ChatState {\r\n    id: string;\r\n    name: string;\r\n    description: string;\r\n    error: string;\r\n    messages: IMessage[];\r\n    isLoading: boolean\r\n}\r\n\r\nexport enum ChatActionEnum{\r\n    SET_ID = \"SET_ID\",\r\n    SET_NAME = \"SET_NAME\",\r\n    ADD_MESSAGE = \"ADD_MESSAGE\",\r\n    DELETE_MESSAGE = \"DELETE_MESSAGE\",\r\n    SET_EDIT_MESSAGE = \"SET_EDIT_MESSAGE\",\r\n    SET_DESCRIPTION = \"SET_DESCRIPTION\",\r\n    SET_ERROR = \"SET_ERROR\",\r\n    SET_IS_LOADING = \"SET_IS_LOADING\",\r\n    SET_MESSAGES = \"SET_MESSAGES\"\r\n}\r\n\r\nexport interface SetIdAction{\r\n    type: ChatActionEnum.SET_ID;\r\n    payload: string\r\n}\r\n\r\nexport interface SetNameAction{\r\n    type: ChatActionEnum.SET_NAME;\r\n    payload: string\r\n}\r\n\r\nexport interface SetDescriptionAction{\r\n    type: ChatActionEnum.SET_DESCRIPTION;\r\n    payload: string\r\n}\r\n\r\nexport interface SetErrorAction{\r\n    type: ChatActionEnum.SET_ERROR;\r\n    payload: string\r\n}\r\n\r\nexport interface SetIsLoadingAction{\r\n    type: ChatActionEnum.SET_IS_LOADING;\r\n    payload: boolean\r\n}\r\n\r\nexport interface SetMessagesAction{\r\n    type: ChatActionEnum.SET_MESSAGES;\r\n    payload: IMessage[]\r\n}\r\n\r\nexport interface AddMessageAction{\r\n    type: ChatActionEnum.ADD_MESSAGE;\r\n    payload: IMessage\r\n}\r\n\r\nexport interface SetEditMessageAction{\r\n    type: ChatActionEnum.SET_EDIT_MESSAGE;\r\n    payload: IMessage\r\n}\r\n\r\nexport interface DeleteMessageAction{\r\n    type: ChatActionEnum.DELETE_MESSAGE;\r\n    payload: string\r\n}\r\n\r\nexport type ChatAction =\r\n    SetIdAction | SetNameAction | SetDescriptionAction | SetErrorAction | SetIsLoadingAction | SetMessagesAction | AddMessageAction | SetEditMessageAction | DeleteMessageAction\r\n","import {IMessage} from \"../../../models/IMessage\";\r\nimport {ChatAction, ChatActionEnum, ChatState} from \"./types\";\r\nconst initialState = {\r\n    id: '',\r\n    name: '',\r\n    description: '',\r\n    error: '',\r\n    messages: [] as IMessage[],\r\n    isLoading: false\r\n}\r\n\r\nexport default function chatReducer(state = initialState, action: ChatAction): ChatState{\r\n    switch (action.type){\r\n        case ChatActionEnum.SET_ID:\r\n            return {...state, id: action.payload}\r\n        case ChatActionEnum.SET_NAME:\r\n            return {...state, name: action.payload}\r\n        case ChatActionEnum.SET_DESCRIPTION:\r\n            return {...state, description: action.payload}\r\n        case ChatActionEnum.SET_ERROR:\r\n            return {...state, error: action.payload, isLoading: false}\r\n        case ChatActionEnum.SET_IS_LOADING:\r\n            return {...state, isLoading: action.payload}\r\n        case ChatActionEnum.SET_MESSAGES:\r\n            return {...state, messages: action.payload, isLoading: false}\r\n        case ChatActionEnum.ADD_MESSAGE:{\r\n            return {...state, messages: [...state.messages, action.payload]}\r\n        }\r\n        case ChatActionEnum.SET_EDIT_MESSAGE:{\r\n            return {...state, messages: state.messages.map(message => message.id === action.payload.id ? action.payload : message)}\r\n        }\r\n        case ChatActionEnum.DELETE_MESSAGE:{\r\n            return {...state, messages: state.messages.filter(message => message.id !== action.payload)}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import auth from './auth'\r\nimport chat from './chat'\r\n\r\nexport default {\r\n    auth,\r\n    chat\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from 'redux-thunk'\r\nimport reducers from \"./reducers\"\r\n\r\nconst rootReducer = combineReducers(reducers)\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch\r\n","import axios from 'axios'\r\nimport AuthService from \"../services/AuthService\";\r\nimport {IUser} from \"../models/IUser\";\r\nimport { store } from '../store';\r\nimport {AuthActionCreators} from \"../store/reducers/auth/action-creators\";\r\n\r\nexport const API_URL = `https://planktoniks.herokuapp.com/api/v1`\r\n\r\nconst api = axios.create({\r\n    withCredentials: true,\r\n    baseURL: API_URL\r\n})\r\n\r\napi.interceptors.request.use(config => {\r\n    config.headers.Authorization = `Authorization ${localStorage.getItem('token')}`\r\n    return config\r\n})\r\napi.interceptors.response.use((config) => {\r\n\r\n    return config\r\n}, async (error) => {\r\n    const originalRequest = error.config\r\n    if(error.response.status === 401 && error.config && !error._isRetry){\r\n        originalRequest._isRetry = true\r\n        try {\r\n            const response = await AuthService.refresh()\r\n            localStorage.setItem('token', response.data.accessToken)\r\n            localStorage.setItem('tokenRefresh', response.data.refreshToken)\r\n            return api.request(originalRequest)\r\n        }\r\n        catch (e){\r\n            localStorage.removeItem('token')\r\n            localStorage.removeItem('tokenRefresh')\r\n            store.dispatch(AuthActionCreators.setIsAuth(false))\r\n            store.dispatch(AuthActionCreators.setUser({} as IUser))\r\n        }\r\n    }\r\n    throw error\r\n})\r\n\r\nexport default api\r\n","import React from \"react\";\r\nimport Login from \"../pages/Login\";\r\nimport Start from \"../pages/Start\";\r\nimport ChatContainer from \"../components/Chat/ChatContainer\";\r\n\r\nexport interface IRoute{\r\n    path: string;\r\n    component: React.ComponentType;\r\n    exact?: boolean;\r\n}\r\n\r\nexport enum RouteNames {\r\n    LOGIN = '/login',\r\n    CHAT = '/chat',\r\n    WELCOME = '/'\r\n}\r\n\r\nexport const publicRouters: IRoute[] = [\r\n    {path: RouteNames.LOGIN, exact: true, component: Login}\r\n]\r\n\r\nexport const privateRouters: IRoute[] = [\r\n    {path: RouteNames.WELCOME, exact: true, component: Start},\r\n    {path: RouteNames.CHAT, exact: true, component: ChatContainer}\r\n]\r\n","import api from \"../http\";\r\nimport {AxiosResponse} from 'axios'\r\nimport {AuthResponse} from \"../models/response/AuthResponse\";\r\nexport default class AuthService {\r\n    static async login(username: string, password: string): Promise<AxiosResponse<AuthResponse>> {\r\n        return api.post<AuthResponse>('/oauth/tokens', {login: username, password})\r\n    }\r\n    static async checkAuth(): Promise<AxiosResponse<AuthResponse>> {\r\n        return api.get<AuthResponse>('/users/sync')\r\n    }\r\n    static async logout(): Promise<void> {\r\n        return api.get('/users/logout')\r\n    }\r\n    static async refresh(): Promise<AxiosResponse<AuthResponse>>{\r\n        return api.post<AuthResponse>('/oauth/refresh', {refreshToken: localStorage.getItem(\"tokenRefresh\") || ''})\r\n    }\r\n}\r\n","import {AuthActionEnum, SetAuthAction, SetErrorAction, SetIsLoadingAction, SetUserAction} from \"./types\";\r\nimport {IUser} from \"../../../models/IUser\";\r\nimport {AppDispatch} from \"../../index\";\r\nimport AuthService from \"../../../services/AuthService\";\r\n\r\nexport const AuthActionCreators = {\r\n    setUser: (user: IUser): SetUserAction => ({type: AuthActionEnum.SET_USER, payload: user}),\r\n    setIsAuth: (isAuth: boolean): SetAuthAction => ({type: AuthActionEnum.SET_AUTH, payload: isAuth}),\r\n    setError: (error: string): SetErrorAction => ({type: AuthActionEnum.SET_ERROR, payload: error}),\r\n    setIsLoading: (isLoading: boolean): SetIsLoadingAction => ({type: AuthActionEnum.SET_IS_LOADING, payload: isLoading}),\r\n    login: (username: string, password: string) => async (dispatch: AppDispatch) => {\r\n        try {\r\n            dispatch(AuthActionCreators.setIsLoading(true))\r\n            const response = await AuthService.login(username, password);\r\n            localStorage.setItem('token', response.data.accessToken)\r\n            localStorage.setItem('tokenRefresh', response.data.refreshToken)\r\n            dispatch(AuthActionCreators.setIsAuth(true))\r\n            dispatch(AuthActionCreators.setUser(response.data.user))\r\n            dispatch(AuthActionCreators.setIsLoading(false))\r\n        }\r\n        catch (e){\r\n            dispatch(AuthActionCreators.setError(\"Произошла ошибка при логине\"))\r\n        }\r\n    },\r\n    checkAuth: () => async (dispatch: AppDispatch) => {\r\n        try {\r\n            dispatch(AuthActionCreators.setIsLoading(true))\r\n            const getUserAuthResponse = await AuthService.checkAuth()\r\n            dispatch(AuthActionCreators.setIsAuth(true))\r\n            dispatch(AuthActionCreators.setUser(getUserAuthResponse.data.user))\r\n            dispatch(AuthActionCreators.setIsLoading(false))\r\n        }\r\n        catch (e){\r\n            dispatch(AuthActionCreators.setError(\"Произошла ошибка при получении данных\"))\r\n        }\r\n    },\r\n    logout: () => async (dispatch: AppDispatch) => {\r\n        try {\r\n            await AuthService.logout()\r\n            localStorage.removeItem('token')\r\n            localStorage.removeItem('tokenRefresh')\r\n            dispatch(AuthActionCreators.setIsAuth(false))\r\n            dispatch(AuthActionCreators.setUser({} as IUser))\r\n        }\r\n        catch (e){\r\n            dispatch(AuthActionCreators.setError(\"Произошла ошибка при выходе\"))\r\n        }\r\n    }\r\n}\r\n","import {AxiosResponse} from \"axios\";\r\nimport api from \"../http\";\r\nimport {IMessage} from \"../models/IMessage\";\r\nimport {ChatResponse} from \"../models/response/ChatResponse\";\r\n\r\nexport default class ChatService {\r\n    static async getMassage(chatId: string): Promise<AxiosResponse<IMessage[]>> {\r\n        return api.get<IMessage[]>(`/users/getAllMessageByIdChat/${chatId}`)\r\n    }\r\n    static async editMessage(idMessage: string, newText: string): Promise<AxiosResponse<IMessage>> {\r\n        return api.post<IMessage>(`/users/editMessageByIdMessage/${idMessage}`, {text: newText})\r\n    }\r\n    static async deleteMessage(idMessage: string): Promise<AxiosResponse<ChatResponse>> {\r\n        return api.get<ChatResponse>(`/users/deleteMessageById/${idMessage}`)\r\n    }\r\n    static async sendMessage(chatId: string, text: string): Promise<AxiosResponse<IMessage>> {\r\n        return api.post<IMessage>(`/users/sendMessageByIdChat`, {chatId, text})\r\n    }\r\n}\r\n","import {\r\n    AddMessageAction,\r\n    ChatActionEnum, DeleteMessageAction,\r\n    SetDescriptionAction, SetEditMessageAction,\r\n    SetErrorAction,\r\n    SetIdAction,\r\n    SetIsLoadingAction, SetMessagesAction,\r\n    SetNameAction\r\n} from \"./types\";\r\nimport {AppDispatch} from \"../../index\";\r\nimport ChatService from \"../../../services/ChatService\";\r\nimport {IMessage} from \"../../../models/IMessage\";\r\n\r\n\r\nexport const ChatActionCreators = {\r\n    setId: (id: string): SetIdAction => ({type: ChatActionEnum.SET_ID, payload: id}),\r\n    setName: (name: string): SetNameAction => ({type: ChatActionEnum.SET_NAME, payload: name}),\r\n    setDescription: (description: string): SetDescriptionAction => ({type: ChatActionEnum.SET_DESCRIPTION, payload: description}),\r\n    setError: (error: string): SetErrorAction => ({type: ChatActionEnum.SET_ERROR, payload: error}),\r\n    setIsLoading: (isLoading: boolean): SetIsLoadingAction => ({type: ChatActionEnum.SET_IS_LOADING, payload: isLoading}),\r\n    setMessages: (messages: IMessage[]): SetMessagesAction => ({type: ChatActionEnum.SET_MESSAGES, payload: messages}),\r\n    addMessages: (message: IMessage): AddMessageAction => ({type: ChatActionEnum.ADD_MESSAGE, payload: message}),\r\n    setDeleteMessages: (idMessage: string): DeleteMessageAction => ({type: ChatActionEnum.DELETE_MESSAGE, payload: idMessage}),\r\n    setEditMessage: (message: IMessage): SetEditMessageAction => ({type: ChatActionEnum.SET_EDIT_MESSAGE, payload: message}),\r\n\r\n    getMessages: (id: string) => async (dispatch: AppDispatch) => {\r\n        try {\r\n            dispatch(ChatActionCreators.setIsLoading(true))\r\n            const response = await ChatService.getMassage(id)\r\n            dispatch(ChatActionCreators.setMessages(response.data))\r\n            dispatch(ChatActionCreators.setIsLoading(false))\r\n        }\r\n        catch (e) {\r\n            dispatch(ChatActionCreators.setError(\"Произошла ошибка при получении сообщений!\"))\r\n        }\r\n    },\r\n    editMessage: (idMessage: string, newText: string) => async (dispatch: AppDispatch) => {\r\n        try {\r\n            const response = await ChatService.editMessage(idMessage, newText)\r\n            dispatch(ChatActionCreators.setEditMessage(response.data))\r\n        }\r\n        catch (e){\r\n            dispatch(ChatActionCreators.setError(\"Произошла ошибка при изменении сообщения!\"))\r\n        }\r\n    },\r\n    deleteMessage: (idMessage: string) => async (dispatch: AppDispatch) => {\r\n        try {\r\n            const response = await ChatService.deleteMessage(idMessage)\r\n            if(response.data.statusDelete){\r\n                dispatch(ChatActionCreators.setDeleteMessages(idMessage))\r\n            }\r\n        }\r\n        catch (e){\r\n            dispatch(ChatActionCreators.setError(\"Произошла ошибка при удалении сообщения!\"))\r\n        }\r\n    },\r\n    sendMessage: (chatId: string, text: string) => async (dispatch: AppDispatch) => {\r\n        try {\r\n            const response = await ChatService.sendMessage(chatId, text)\r\n            dispatch(ChatActionCreators.addMessages(response.data))\r\n        }\r\n        catch (e){\r\n            dispatch(ChatActionCreators.setError(\"Произошла ошибка при отправке сообщения\"))\r\n        }\r\n    }\r\n}\r\n","import {AuthActionCreators} from \"./auth/action-creators\";\r\nimport {ChatActionCreators} from \"./chat/action-creators\";\r\n\r\n\r\nexport const allActionCreators = {\r\n    ...AuthActionCreators,\r\n    ...ChatActionCreators\r\n}\r\n","import {useDispatch} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {allActionCreators} from \"../store/reducers/action-creators\";\r\n\r\n\r\nexport const useActions = () => {\r\n    const dispatch = useDispatch()\r\n    return bindActionCreators(allActionCreators, dispatch)\r\n}\r\n","import React, {FC, useState} from 'react';\r\nimport {Button, Form, Input} from \"antd\";\r\nimport { rules } from '../utils/rules';\r\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\r\nimport {useActions} from \"../hooks/useActions\";\r\n\r\nconst LoginForm: FC = () => {\r\n    const {error, isLoading} = useTypedSelector(state => state.auth)\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const {login} = useActions()\r\n\r\n    const submit = () => {\r\n        login(username, password)\r\n    }\r\n\r\n    return (\r\n        <Form\r\n            onFinish={submit}\r\n        >\r\n            {error && <div style={{color: \"red\"}}>\r\n                {error}\r\n            </div>}\r\n            <Form.Item\r\n                label=\"Имя пользователя\"\r\n                name=\"username\"\r\n                rules={[rules.required('Пожалуйста введите имя пользователя!')]}\r\n            >\r\n                <Input\r\n                    value={username}\r\n                    onChange={(e)=>setUsername(e.target.value)}\r\n                />\r\n            </Form.Item>\r\n            <Form.Item\r\n                label=\"Пароль\"\r\n                name=\"password\"\r\n                rules={[rules.required('Пожалуйста введите пароль!')]}\r\n            >\r\n                <Input\r\n                    value={password}\r\n                    type={\"password\"}\r\n                    onChange={(e)=>setPassword(e.target.value)}\r\n                />\r\n            </Form.Item>\r\n            <Form.Item>\r\n                <Button type=\"primary\" htmlType=\"submit\" loading={isLoading}>\r\n                    Войти\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React, {FC} from 'react';\r\nimport {Card, Layout, Row} from \"antd\";\r\nimport LoginForm from \"../components/LoginForm\";\r\n\r\nconst Login:FC = () => {\r\n    return (\r\n        <Layout>\r\n            <Row justify={\"center\"} align={\"middle\"} className={\"h100\"}>\r\n                <Card>\r\n                    <LoginForm/>\r\n                </Card>\r\n            </Row>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import React, {FC} from 'react';\r\nimport {Layout, Row} from \"antd\";\r\n\r\nconst Start: FC = () => {\r\n    return (\r\n        <Layout>\r\n            <Row justify={\"center\"} align={\"middle\"} className={\"h100\"}>\r\n                Welcome to chat service your company!\r\n            </Row>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default Start;\r\n","import React, {FC, useState} from 'react';\r\nimport {Button, Form, Input, Row} from \"antd\";\r\nimport {rules} from \"../../utils/rules\";\r\nimport {useTypedSelector} from \"../../hooks/useTypedSelector\";\r\nimport {useActions} from \"../../hooks/useActions\";\r\n\r\nconst ChatForm: FC = () => {\r\n    const {error, id} = useTypedSelector(state => state.chat)\r\n    const [message, setMessage] = useState('')\r\n    const {sendMessage} = useActions()\r\n\r\n    const submit = () => {\r\n        sendMessage(id, message)\r\n        setMessage('')\r\n    }\r\n    return (\r\n        <div style={{height: \"10%\", width: \"100%\", marginTop: 12}}>\r\n            <Form\r\n                onFinish={submit}\r\n            >\r\n                <Row>\r\n                    <Form.Item\r\n                        style={{flexGrow: 1}}\r\n                        name=\"messageText\"\r\n                        rules={[rules.required('Нельзя отправлять пустое сообщение!')]}\r\n                    >\r\n                        <Input.TextArea\r\n                            value={message}\r\n                            onKeyPress={e => {\r\n                                if(e.key === \"Enter\"){\r\n                                    submit()\r\n                                }\r\n                            }}\r\n                            onChange={(e)=>setMessage(e.target.value)}\r\n                            placeholder=\"Введите сообщение...\"\r\n                            autoSize={{ minRows: 1, maxRows: 2}}\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button style={{height: \"100%\"}} type=\"primary\" htmlType=\"submit\" loading={false}>\r\n                            Отправить\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Row>\r\n                {error && <div style={{color: \"red\"}}>\r\n                    {error}\r\n\t\t\t\t</div>}\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatForm;\r\n","import React, {FC, useState} from 'react';\r\nimport {Card, Input, Modal, Timeline} from \"antd\";\r\nimport {IMessage} from \"../../models/IMessage\";\r\nimport ChatForm from \"./ChatForm\";\r\nimport {useTypedSelector} from \"../../hooks/useTypedSelector\";\r\nimport {CloseOutlined, EditOutlined} from \"@ant-design/icons\"\r\nimport moment from \"moment\";\r\nimport {useActions} from \"../../hooks/useActions\";\r\n\r\ninterface ChatProps{\r\n    messages: IMessage[];\r\n    isLoading: boolean\r\n}\r\n\r\nconst Chat: FC<ChatProps> = (props) => {\r\n    const {user} = useTypedSelector(state => state.auth)\r\n    const [isEdit, setIsEdit] = useState(false)\r\n    const [editedMessage, setEditedMessage] = useState({} as IMessage)\r\n    const [newTextMessage, setNewTextMessage] = useState('')\r\n    const {deleteMessage, editMessage} = useActions()\r\n\r\n    const handleOk = () => {\r\n\r\n        setIsEdit(false)\r\n        editMessage(editedMessage.id, newTextMessage)\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setIsEdit(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Card style={{overflowY: \"scroll\", overflowX: \"hidden\", padding: 16, height: \"70%\", width: \"100%\"}}>\r\n                {props.messages.length !== 0\r\n                    ?\r\n                        <Timeline mode=\"alternate\">\r\n                        {props.messages.map((item, index) => {\r\n                            let date = new Date(item.date)\r\n                            return(\r\n                                <Timeline.Item\r\n                                    key={`mes${index}`}\r\n                                    position={item.userLogin === user.login ? \"left\" : \"right\"}\r\n                                    dot={<img src=\"https://fiverr-res.cloudinary.com/images/t_main1,q_auto,f_auto,q_auto,f_auto/gigs/21760012/original/d4c0c142f91f012c9a8a9c9aeef3bac28036f15b/create-your-cartoon-style-flat-avatar-or-icon.jpg\" style={{width: 32, height: 32, borderRadius: \"50%\"}} alt=\"\"/>}\r\n                                >\r\n                                    <div className={\"contentMessage\"} style={{position: \"relative\", paddingTop: 8, paddingBottom: 8}}>\r\n                                        <div style={{padding: 12, borderWidth: 1, borderColor: \"#1890ff\", backgroundColor: \"#edf9ff\", borderStyle: \"solid\", borderRadius: 5}}>\r\n                                            <p style={{width: \"100%\", textAlign: \"start\"}}>{item.text}</p>\r\n                                        </div>\r\n                                        {item.userLogin === user.login &&\r\n                                            <>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<EditOutlined\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={()=> {\r\n                                                        setIsEdit(true)\r\n                                                        setEditedMessage(item)\r\n                                                        setNewTextMessage(item.text)\r\n                                                    }}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={\"iconChat--hover\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{position: \"absolute\", top: 14, right: 28}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<CloseOutlined\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={()=>{deleteMessage(item.id)}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={\"iconChat--hover\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{position: \"absolute\", top: 14, right: 8}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n                                            </>\r\n                                        }\r\n                                        <span style={{marginRight: 4, fontSize: 12, color: \"#444\", fontWeight: \"bold\", position: \"absolute\", left: 8, top: -10}}>{item.userLogin}</span>\r\n                                        <span style={{fontSize: 10, position: \"absolute\", right: 8, bottom: -8}}>{moment(date).fromNow()}</span>\r\n                                    </div>\r\n                                </Timeline.Item>\r\n                            )\r\n                        })}\r\n                    </Timeline>\r\n                    :\r\n                        <div>\r\n                            <p>Нет сообщений. Будь первым :)</p>\r\n                        </div>\r\n                }\r\n\r\n            </Card>\r\n            <ChatForm/>\r\n            <Modal title=\"Редактирование сообщения\" visible={isEdit} onOk={handleOk} onCancel={handleCancel}>\r\n                <p>Давайте поменяем Ваше сообщение</p>\r\n                <Input value={newTextMessage} onChange={(e)=>setNewTextMessage(e.target.value)}/>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n","import React, {FC, useEffect} from 'react';\r\nimport {Layout, Row} from \"antd\";\r\nimport Chat from \"./Chat\";\r\nimport {useTypedSelector} from \"../../hooks/useTypedSelector\";\r\nimport {useActions} from \"../../hooks/useActions\";\r\n\r\n\r\nconst ChatContainer: FC = () => {\r\n    const {id, name, description, isLoading, messages} = useTypedSelector(state => state.chat)\r\n    const {getMessages} = useActions()\r\n    useEffect(()=>{\r\n        getMessages(id)\r\n    },[id])\r\n    if(isLoading){\r\n        return(\r\n            <Layout>\r\n                <Row className={\"h100\"} justify={\"center\"}>\r\n                    Loading...\r\n                </Row>\r\n            </Layout>\r\n        )\r\n    }\r\n    return (\r\n        <Layout className={\"h100\"}>\r\n            <Row style={{height: \"100%\", padding: 16}}>\r\n                <div style={{height: \"20%\"}}>\r\n                    <h2 style={{width: \"100%\"}}>{name}</h2>\r\n                    <p style={{width: \"100%\"}}>{description}</p>\r\n                </div>\r\n\r\n                <Chat\r\n                    messages={messages}\r\n                    isLoading={isLoading}\r\n                />\r\n            </Row>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default ChatContainer;\r\n","import React, {FC} from 'react';\r\nimport {Switch, Route, Redirect} from \"react-router-dom\";\r\nimport {privateRouters, publicRouters, RouteNames} from \"../routers\";\r\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\r\n\r\n\r\nconst AppRouter: FC = () => {\r\n    const {isAuth} = useTypedSelector(state => state.auth)\r\n    return (\r\n        isAuth\r\n            ?\r\n            <Switch>\r\n                {privateRouters.map(route =>\r\n                    <Route\r\n                        path={route.path}\r\n                        exact={route.exact}\r\n                        component={route.component}\r\n                        key={route.path}\r\n                    />\r\n                )}\r\n                <Redirect to={RouteNames.WELCOME}/>\r\n            </Switch>\r\n            :\r\n            <Switch>\r\n                {publicRouters.map(route =>\r\n                    <Route\r\n                        path={route.path}\r\n                        exact={route.exact}\r\n                        component={route.component}\r\n                        key={route.path}\r\n                    />\r\n                )}\r\n                <Redirect to={RouteNames.LOGIN}/>\r\n            </Switch>\r\n    );\r\n};\r\n\r\nexport default AppRouter;\r\n","import React, {FC} from 'react';\r\nimport {RouteNames} from \"../routers\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nconst Logo: FC = () => {\r\n    const router = useHistory()\r\n    return (\r\n        <div\r\n            style={{fontSize: 24, color: \"#fff\", cursor: \"pointer\"}}\r\n            onClick={()=>router.push(RouteNames.WELCOME)}\r\n        >\r\n            Planktoniks\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Logo;\r\n","import React, {FC} from 'react';\r\nimport {Layout,Menu, Row} from \"antd\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport { RouteNames } from '../routers';\r\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\r\nimport {useActions} from \"../hooks/useActions\";\r\nimport Logo from \"./Logo\";\r\n\r\nconst Navbar: FC = () => {\r\n    const router = useHistory()\r\n    const {isAuth, user} = useTypedSelector(state => state.auth)\r\n    const {logout} = useActions()\r\n    return (\r\n        <Layout.Header>\r\n            <Row justify={\"space-between\"}>\r\n                <Logo/>\r\n                {isAuth\r\n                    ?\r\n                    <Row>\r\n                        <div style={{color: \"white\", marginRight: 8}}>{user.username}</div>\r\n                        <Menu theme=\"dark\" mode=\"horizontal\" selectable={false}>\r\n\r\n                            <Menu.Item\r\n                                key=\"1\"\r\n                                onClick={logout}\r\n                            >\r\n                                Выйти\r\n                            </Menu.Item>\r\n                        </Menu>\r\n                    </Row>\r\n                    :\r\n                    <Menu style={{minWidth: '200px', justifyContent: \"flex-end\"}} theme=\"dark\" mode=\"horizontal\" selectable={false}>\r\n                        <Menu.Item\r\n                            key=\"1\"\r\n                            onClick={()=>router.push(RouteNames.LOGIN)}\r\n                        >\r\n                            Логин\r\n                        </Menu.Item>\r\n                    </Menu>\r\n                }\r\n            </Row>\r\n        </Layout.Header>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","import { Menu, Layout } from 'antd';\r\nimport React, {FC} from 'react';\r\nimport {RouteNames} from \"../routers\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {useActions} from \"../hooks/useActions\";\r\n\r\nconst Sidebar: FC = () => {\r\n    const router = useHistory()\r\n    const {setId, setName, setDescription, setError} = useActions()\r\n    return (\r\n        <Layout.Sider width={200} className=\"site-layout-background\">\r\n            <Menu\r\n                mode=\"inline\"\r\n                defaultSelectedKeys={['1']}\r\n                style={{ height: '100%', borderRight: 0 }}\r\n            >\r\n                <Menu.Item\r\n                    key=\"1\"\r\n                    onClick={()=>{\r\n                        setId(\"61420e2c341aae384410455a\")\r\n                        setName(\"Чат для обсуждения рабочих вопросов\")\r\n                        setDescription(\"В данном чате пишем исключительно по рабочим вопросам, чтобы избежать потери важной информации. Для общения есть флудилка :)\")\r\n                        setError(\"\")\r\n                        router.push(RouteNames.CHAT)\r\n                    }}\r\n                >\r\n                    Работа\r\n                </Menu.Item>\r\n                <Menu.Item\r\n                    key=\"2\"\r\n                    onClick={()=>{\r\n                        setId(\"61420e35341aae384410455c\")\r\n                        setName(\"Чат для общения и сплочения\")\r\n                        setDescription(\"Если вам скучно, пишите, не стесняйтесь!\")\r\n                        setError(\"\")\r\n                        router.push(RouteNames.CHAT)\r\n                    }}\r\n                >\r\n                    Флудилка\r\n                </Menu.Item>\r\n            </Menu>\r\n        </Layout.Sider>\r\n    );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React, {FC, useEffect} from 'react';\nimport AppRouter from \"./components/AppRouter\";\nimport Navbar from \"./components/Navbar\";\nimport {Layout} from \"antd\";\nimport './App.css'\nimport {useActions} from \"./hooks/useActions\";\nimport Sidebar from \"./components/Sidebar\";\nimport {useTypedSelector} from \"./hooks/useTypedSelector\";\n\nconst App:FC = () => {\n    const {isAuth} = useTypedSelector(state => state.auth)\n    const {checkAuth} = useActions()\n    useEffect(()=>{\n        checkAuth()\n    },[])\n  return (\n    <Layout style={{overflow: \"hidden\"}}>\n        <Navbar/>\n        <Layout>\n            {isAuth &&\n\t\t\t    <Sidebar/>\n            }\n            <Layout.Content>\n                <AppRouter/>\n            </Layout.Content>\n        </Layout>\n    </Layout>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport {store} from \"./store\";\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}